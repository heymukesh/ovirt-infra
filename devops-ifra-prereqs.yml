---
- hosts: all
  become: yes
  tasks:

   - name: add flexera user
     user:
       name: flexera
       password: flexera
  
 
     
   - name: disable SELinux
     shell: setenforce 0

   - name: disable SELinux on reboot
     selinux:
       state: disabled


   - name: Disable IPv6 with sysctl
     sysctl: name={{ item }} value=1 state=present
     with_items:
       - net.ipv6.conf.all.disable_ipv6
       - net.ipv6.conf.default.disable_ipv6
       - net.ipv6.conf.lo.disable_ipv6

   - name: RedHat | disable ipv6 in sysconfig/network
     blockinfile:
       path: /etc/sysconfig/network
       block: |
         NETWORKING_IPV6=NO
     notify:
       - restart network
     when: ansible_os_family == 'CentOS'

   - name: generate ssh keys
     shell: ssh-keygen -b 2048 -t rsa -f /root/.ssh/id_rsa -q -N ""
     args:
       creates: /root/.ssh/id_rsa
   - name: Upgrade the Machine
     yum:
       name: '*'
       state: latest

   - name: Check for reboot hint.
     shell: LAST_KERNEL=$(rpm -q --last kernel | awk 'NR==1{sub(/kernel-/,""); print $1}'); CURRENT_KERNEL=$(uname -r); if [ $LAST_KERNEL != $CURRENT_KERNEL ]; then echo 'reboot'; else echo 'no'; fi
     ignore_errors: true
     register: reboot_hint

   - name: Rebooting ...
     command: shutdown -r now "Reboot required for updated kernel"
     async: 0
     poll: 0
     sudo: true
     ignore_errors: true
     when: reboot_hint.stdout.find("reboot") != -1
     register: rebooting

   - name: Wait for thing to reboot...
     pause: seconds=45
     when: rebooting|changed
     
   - name: Enable EPEL Rpository
     #shell: yum install epel-release -y
     yum:
       name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm
       state: present

   - name: Import EPEL Rpository key
     rpm_key:
       key: https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-{{ ansible_distribution_major_version }}
       state: present

   - name: Install Java
     yum:
       name: java
       state: latest

   - name: Install Java-Devel
     yum:
       name: java-devel
       state: latest
   


- hosts: jenkins-slave-0
  become: yes
  tasks:

   - name: install maven, git, ansible
     yum:
       name: 
         - maven
         - git
         - ansible
       state: latest

   - name: add self authorization key
     shell: cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys

- hosts: jekins-master
  become: yes
  tasks:
   - name: Add Jenkins Repository
     get_url:
       url: https://pkg.jenkins.io/redhat/jenkins.repo
       dest: /etc/yum.repos.d/

   - name: Import Jenkins Repo Keys
     rpm_key:
       key: https://pkg.jenkins.io/redhat/jenkins.io.key
       state: present

   - name: Install Jenkins
     yum:
       name: jenkins
       state: latest

   - name: enable jenkins service is started and enabled
     systemd:
       name: jenkins
       enabled: yes
       state: started

   - name: Create Directory known_hosts for slave nodes
     file: 
       path: /var/lib/jenkins/.ssh
       state: directory 

   - name: Scan Slave ssh key  
     shell:  ssh-keyscan -H 10.80.41.217 >> /var/lib/jenkins/.ssh/known_hosts

- hosts: docker 
  become: yes
  tasks:

   - name: Download Tomcat
     get_url: 
        url: http://10.80.40.21/shared/tomcat/tomcat9.tar
        dest: /tmp

   - name: Extract the Tomcat
     unarchive:
        src: /tmp/tomcat9.tar
        dest: /opt
        remote_src: yes
   
   - name: Start Tomcat Service
     shell: /opt/opt/tomcat9/bin/startup.sh
     
- hosts: docker, k8s-master, k8s-node-1, k8s-node-2
  become: yes
  tasks:

   - name: Add Docker Repository
     get_url:
       url: https://download.docker.com/linux/centos/docker-ce.repo
       dest: /etc/yum.repos.d/

   - name: Install Docker
     yum:
       name: 
         - yum-utils
         - device-mapper-persistent-data
         - lvm2
         - python-pip
         #- docker
         - 3:docker-ce-18.09.0-3.el7.x86_64
         - 1:docker-ce-cli-18.09.0-3.el7.x86_64
       state: present
   
   - name: adding root user to group docker
     user:
       name: root
       groups: docker
       append: yes

   - name: upgrade pip
     pip:
       name: pip
       state: latest

   - name: enable docker service is started and enabled
     systemd:
       name: docker
       enabled: yes
       state: started

- hosts: k8s-master, k8s-node-1, k8s-node-2
  become: yes
  tasks:
     
   - name: Remove swapfile from /etc/fstab
     mount:
       name: swap
       fstype: swap
       state: absent

   - name: Disable swap
     command: swapoff -a
     when: ansible_swaptotal_mb > 0

   - name: load the kernel module
     modprobe:
       name: br_netfilter
       state: present

   - name: ensure net.bridge.bridge-nf-call-ip6tables is set to 1
     sysctl:
       name: net.bridge.bridge-nf-call-ip6tables
       value: '1'
       state: present

   - name: ensure net.bridge.bridge-nf-call-iptables is set to 1
     sysctl:
       name: net.bridge.bridge-nf-call-iptables
       value: '1'
       state: present
   
   - name: add Kubernetes dnf repository
     yum_repository:
       name: Kubernetes
       description: Kubernetes dnf repository
       baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
       gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
       gpgcheck: yes

   - name: install kubelet
     yum:
        name: kubelet
        state: latest
        update_cache: true

   - name: install kubeadm
     yum:
        name: kubeadm
        state: latest

   - name: start kubelet
     service:
       name: kubelet
       enabled: yes
       state: started

#- hosts: k8s-master
#  become: yes
#  tasks:
#    - name: initialize the cluster using script
#      #script: /etc/ansible/kube.sh
#      #- name: initialize the cluster
#      shell: kubeadm init --pod-network-cidr=10.244.0.0/16 >> cluster_initialized.txt #--skip-preflight-checks=true --apiserver-advertise-address=10.80.151.199 --pod-network-cidr=10.244.0.0/16 >> cluster_initialized.txt
#      args:
#        chdir: /root
#        creates: cluster_initialized.txt

      #command: kubeadm init --apiserver-advertise-address="192.168.50.10" --apiserver-cert-extra-sans="192.168.50.10"  --node-name k8s-master --pod-network-cidr=192.168.0.0/16 >> cluster_initialized.txt
      #
      #
#    - name: create .kube directory
#      become: yes
#      #become_user: root
#      file:
#        path: $HOME/.kube
#        state: directory
#        mode: 0755

#    - name: copy admin.conf to user's kube config
#      copy:
#        src: /etc/kubernetes/admin.conf
#        dest: /root/.kube/config
#        remote_src: yes
#        owner: root

#    - name: install kube-flannel
#      become: yes
#      #become_user: root
#      shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.9.1/Documentation/kube-flannel.yml >> pod_network_setup.txt
#      #shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/a70459be0084506e4ec919aa1c114638878db11b/Documentation/kube-flannel.yml >> pod_network_setup.txt
#      args:
#        chdir: $HOME
#        creates: pod_network_setup.txt

    - name: install kube-flannel-rbac
      become: yes
      #become_user: root
      shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/k8s-manifests/kube-flannel-rbac.yml >> rbac_setup.txt
      #shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/a70459be0084506e4ec919aa1c114638878db11b/Documentation/kube-flannel.yml >> pod_network_setup.txt
      args:
        chdir: $HOME
        creates: rbac_setup.txt

    - name: get join command
      shell: kubeadm token create --print-join-command
      register: join_command_raw

    - name: set join command
      set_fact:
        join_command: "{{ join_command_raw.stdout_lines[0] }}"


- hosts: k8s-node-1, k8s-node-2
  become: yes
  #remote_user: root
  tasks:
    - name: join cluster
      shell: "{{ hostvars['k8s-master'].join_command }}" # --ignore-preflight-errors all  >> node_joined.txt"
      args:
        chdir: $HOME
        creates: node_joined.txt

- hosts: k8s-master
  become: yes
  tasks:
    - name: display worker nodes
      shell: kubectl label node {{item}} node-role.kubernetes.io/worker=worker
      with_items:
        - k8s-node-1
        - k8s-node-2

